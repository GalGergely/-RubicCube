/* autogenerated by Processing revision 1289 on 2023-02-28 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import peasy.*;
import java.util.Iterator;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class RubiksCubeLogic extends PApplet {



PeasyCam cam;
Settings setting;
AlgorithmCollection algorithm;



public void setup() {
/* size commented out by preprocessor */;
setting = new Settings();
cam = new PeasyCam(this, setting.cameraZoomIn);
algorithm = new AlgorithmCollection();
String[] lperm = {"l", "l", "l", "l"};
algorithm.add("kakakukifej", lperm);
}

public void draw () {
  background(setting.backgroundColor);
}
public static class Algorithm {
    private String name;
    private String[] moves;

    public Algorithm(String name, String[] moves) {
        this.name = name;
        this.moves = moves;
    }

    public String getName() {
        return name;
    }

    public String[] getMoves() {
        return moves;
    }
}


public class AlgorithmCollection {
    private ArrayList<Algorithm> algorithms = new ArrayList<Algorithm>();
    private JSONObject json;
    public AlgorithmCollection () {
        json = loadJSONObject(new File("algorithms.json"));
        // Iterate through the keys of the JSON object
        for (String key : (String[]) json.keys().toArray(new String[json.size()])) {
            // Get the JSON array associated with the key
            JSONArray array = json.getJSONArray(key);

            // Convert the JSON array to a String array
            String[] moves = new String[array.size()];
            for (int i = 0; i < array.size(); i++) {
                moves[i] = array.getString(i);
            }

            // Create a new Algorithm object and add it to the list
            algorithms.add(new Algorithm(key, moves));
        }
    }

    public void printAlgorithms() {
        // Iterate through the algorithms list and print each algorithm
        for (Algorithm algorithm : algorithms) {
            println(algorithm.getName() + ": " + join(algorithm.getMoves(), " "));
        }
    }

    public void add(String name, String[] moves) {
        // Create a new Algorithm object and add it to the list
        algorithms.add(new Algorithm(name, moves));

        // Create a new JSON array and add the moves to it
        JSONArray array = new JSONArray();
        for (String move : moves) {
            array.append(move);
        }

        // Add the new key-value pair to the JSON object and save it to the file
        json.setJSONArray(name, array);
        saveJSONObject(json, "algorithms.json");
    }

    public void delete(String name) {
        // Remove the Algorithm object with the given name from the list
        for (int i = 0; i < algorithms.size(); i++) {
            if (algorithms.get(i).getName().equals(name)) {
                algorithms.remove(i);
                break;
            }
        }

        // Remove the key-value pair with the given name from the JSON object and save it to the file
        json.remove(name);
        saveJSONObject(json, "algorithms.json");
    }
}




class Settings {
  public int dimension = 3; 
  public int sideLength = 50; 
  public int cameraZoomIn = 500;
  public int backgroundColor = 200;
  public float cubeOffstet = (dimension - 1) * sideLength * 0.5f;
  
  // cube base settings
  public int boxColor = 255; //fehÃ©r
  public int strokeColor = 0; //fekete
  public float strokeWeight= 0.1f; //fekete
  
  // color settings
  public int blue = color(0,0,255);
  public int green = color(0,255,0);
  public int white = color(255,255,255);
  public int yellow = color(255,255,0);
  public int orange = color(255,150,0);
  public int red = color(255,0,0);
}


  public void settings() { size(600, 600, P3D); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "RubiksCubeLogic" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
